# This code is auto-generated by xpdt; do not modify
# xpdt is written by Gianni Tedesco
# https://www.scaramanga.co.uk

## import 'x1b_defns.pyt' as x1b
## import 'x1v_defns.pyt' as x1v
from struct import Struct as _Struct
from typing import NamedTuple as _NamedTuple, Tuple as _Tuple

__all__ = (
#% for struct in namespace %#
    '$$struct.name$$',
#% endfor %#
)
#% macro write_class(struct) %#


class _$$struct.name$$_storage(_NamedTuple):
#% for name, (type_name, type) in struct %#
    $$name$$: $$type.pytype$$
#% endfor %#


class $$struct.name$$(_$$struct.name$$_storage):
    __slots__ = ()

## if struct.needs_vbuf
    _fmt = _Struct('=I$$struct.struct_fmt$$')
##else
    _fmt = _Struct('=$$struct.struct_fmt$$')
## endif
    _fmt_size = _fmt.size
    _pack = _fmt.pack
    _pack_into = _fmt.pack_into
    _unpack_from = _fmt.unpack_from
    _bin_size = _fmt.size

    @classmethod
    def _frombytes(cls,
                   buf: bytes,
                   ) -> '$$struct.name$$':
        _, obj = cls._frombuf(buf, 0)
        return obj
#% if struct.needs_vbuf %#
$$x1v.write_methods(struct)$$
#% elif not struct.all_members_scalar %#
$$x1b.write_methods(struct)$$
#% else %#

    def __bytes__(self) -> bytes:
        return self._pack(*self)

    @classmethod
    def _frombuf(cls,
                 buf: bytes,
                 off: int = 0,
                 ) -> _Tuple[int, '$$struct.name$$']:
        fields = cls._unpack_from(buf, off)
        return cls._bin_size, cls(*fields)
#% endif %#
#%- endmacro -%#

#%- for struct in namespace -%#
$$write_class(struct)$$
#%- endfor -%#
